// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: superpeer.proto

package superpeer

import (
	types "supaHUB/backend/types"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SuperPeer_Ping_FullMethodName             = "/protos.SuperPeer/Ping"
	SuperPeer_Register_FullMethodName         = "/protos.SuperPeer/Register"
	SuperPeer_Login_FullMethodName            = "/protos.SuperPeer/Login"
	SuperPeer_SearchFiles_FullMethodName      = "/protos.SuperPeer/SearchFiles"
	SuperPeer_GetPeerFiles_FullMethodName     = "/protos.SuperPeer/GetPeerFiles"
	SuperPeer_GetPeerConnexion_FullMethodName = "/protos.SuperPeer/GetPeerConnexion"
)

// SuperPeerClient is the client API for SuperPeer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperPeerClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	SearchFiles(ctx context.Context, in *SearchFilesRequest, opts ...grpc.CallOption) (*SearchFilesResponse, error)
	GetPeerFiles(ctx context.Context, in *types.FileList, opts ...grpc.CallOption) (*Empty, error)
	GetPeerConnexion(ctx context.Context, in *PeerId, opts ...grpc.CallOption) (*PeerConnexion, error)
}

type superPeerClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperPeerClient(cc grpc.ClientConnInterface) SuperPeerClient {
	return &superPeerClient{cc}
}

func (c *superPeerClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SuperPeer_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superPeerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, SuperPeer_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superPeerClient) Login(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, SuperPeer_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superPeerClient) SearchFiles(ctx context.Context, in *SearchFilesRequest, opts ...grpc.CallOption) (*SearchFilesResponse, error) {
	out := new(SearchFilesResponse)
	err := c.cc.Invoke(ctx, SuperPeer_SearchFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superPeerClient) GetPeerFiles(ctx context.Context, in *types.FileList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SuperPeer_GetPeerFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superPeerClient) GetPeerConnexion(ctx context.Context, in *PeerId, opts ...grpc.CallOption) (*PeerConnexion, error) {
	out := new(PeerConnexion)
	err := c.cc.Invoke(ctx, SuperPeer_GetPeerConnexion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperPeerServer is the server API for SuperPeer service.
// All implementations must embed UnimplementedSuperPeerServer
// for forward compatibility
type SuperPeerServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *RegisterRequest) (*RegisterResponse, error)
	SearchFiles(context.Context, *SearchFilesRequest) (*SearchFilesResponse, error)
	GetPeerFiles(context.Context, *types.FileList) (*Empty, error)
	GetPeerConnexion(context.Context, *PeerId) (*PeerConnexion, error)
	mustEmbedUnimplementedSuperPeerServer()
}

// UnimplementedSuperPeerServer must be embedded to have forward compatible implementations.
type UnimplementedSuperPeerServer struct {
}

func (UnimplementedSuperPeerServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSuperPeerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSuperPeerServer) Login(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSuperPeerServer) SearchFiles(context.Context, *SearchFilesRequest) (*SearchFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFiles not implemented")
}
func (UnimplementedSuperPeerServer) GetPeerFiles(context.Context, *types.FileList) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerFiles not implemented")
}
func (UnimplementedSuperPeerServer) GetPeerConnexion(context.Context, *PeerId) (*PeerConnexion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerConnexion not implemented")
}
func (UnimplementedSuperPeerServer) mustEmbedUnimplementedSuperPeerServer() {}

// UnsafeSuperPeerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperPeerServer will
// result in compilation errors.
type UnsafeSuperPeerServer interface {
	mustEmbedUnimplementedSuperPeerServer()
}

func RegisterSuperPeerServer(s grpc.ServiceRegistrar, srv SuperPeerServer) {
	s.RegisterService(&SuperPeer_ServiceDesc, srv)
}

func _SuperPeer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperPeerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperPeer_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperPeerServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperPeer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperPeerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperPeer_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperPeerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperPeer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperPeerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperPeer_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperPeerServer).Login(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperPeer_SearchFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperPeerServer).SearchFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperPeer_SearchFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperPeerServer).SearchFiles(ctx, req.(*SearchFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperPeer_GetPeerFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.FileList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperPeerServer).GetPeerFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperPeer_GetPeerFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperPeerServer).GetPeerFiles(ctx, req.(*types.FileList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperPeer_GetPeerConnexion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperPeerServer).GetPeerConnexion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperPeer_GetPeerConnexion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperPeerServer).GetPeerConnexion(ctx, req.(*PeerId))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperPeer_ServiceDesc is the grpc.ServiceDesc for SuperPeer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperPeer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SuperPeer",
	HandlerType: (*SuperPeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SuperPeer_Ping_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _SuperPeer_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SuperPeer_Login_Handler,
		},
		{
			MethodName: "SearchFiles",
			Handler:    _SuperPeer_SearchFiles_Handler,
		},
		{
			MethodName: "GetPeerFiles",
			Handler:    _SuperPeer_GetPeerFiles_Handler,
		},
		{
			MethodName: "GetPeerConnexion",
			Handler:    _SuperPeer_GetPeerConnexion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "superpeer.proto",
}
